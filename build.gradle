plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.17'
    id "me.modmuss50.mod-publish-plugin" version "0.7.2"
}

apply from: 'https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/changelog.gradle'

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

// needs to be done AFTER version is set
apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

repositories {
    mavenLocal()
}

base {
    archivesName = archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "dev.ftb.mods:ftb-library-neoforge:${ftb_library_version}"

    // JEI
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")

    implementation("curse.maven:jade-324717:${jade_curse_id}")

    compileOnly("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")
    compileOnly("dev.latvian.mods:rhino:${rhino_version}")
}

repositories {
    maven { url "https://maven.ftb.dev/releases" } // FTB Mods
    maven { url "https://maven.architectury.dev" }
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup("mezz.jei")
        }
    }
    maven { url "https://maven.latvian.dev/releases" }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId = archives_base_name
            version ftbPublishing.mavenVersion
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
        if (ftbPublishing.ftbToken) {
            maven {
                url ftbPublishing.ftbURL
                credentials {
                    username = ftbPublishing.ftbUser
                    password = ftbPublishing.ftbToken
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_KEY").getOrNull() == null
    changelog = createChangelog(project)
    version = mod_version

    def tag = providers.environmentVariable("TAG").getOrElse("release")
    type = tag.endsWith("-beta") ? BETA : (tag.endsWith("-alpha") ? ALPHA : STABLE)

    def createOptions = (String projectName) -> {
        publishOptions {
            file = jar.archiveFile
            displayName = "[${projectName.toUpperCase()}] ${mod_name} ${mod_version}"
            modLoaders.add(projectName.toLowerCase())
        }
    }

    def neoForgeOptions = createOptions("neoforge")

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_KEY")
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(JavaVersion.VERSION_21)
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoForgeOptions)
        projectId = curseforge_id
        requires('ftb-library-forge')
        optional('jei')
        optional('kubejs')
        optional('jade')
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
